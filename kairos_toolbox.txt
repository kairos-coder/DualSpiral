# === KAIROS PYTHON TOOLBOX ===

# 1. Keywords (35)
if
else
elif
for
while
break
continue
try
except
finally
raise
with
as
def
class
return
yield
import
from
pass
global
nonlocal
assert
lambda
del
and
or
not
is
in
async
await
True
False
None

# 2. Built-in Functions (~60)
print()
len()
range()
enumerate()
zip()
map()
filter()
sorted()
reversed()
list()
dict()
set()
tuple()
int()
float()
str()
bool()
input()
open()
abs()
all()
any()
bin()
bool()
bytearray()
bytes()
callable()
chr()
classmethod()
compile()
complex()
delattr()
dict()
dir()
divmod()
enumerate()
eval()
exec()
filter()
format()
frozenset()
getattr()
globals()
hasattr()
hash()
help()
hex()
id()
input()
int()
isinstance()
issubclass()
iter()
len()
list()
locals()
map()
max()
memoryview()
min()
next()
object()
oct()
open()
ord()
pow()
print()
property()
range()
repr()
reversed()
round()
set()
setattr()
slice()
sorted()
staticmethod()
str()
sum()
super()
tuple()
type()
vars()
zip()

# 3. Common Punctuation and Syntax Tokens
()
[]
{}
,
:
;
.
...
_
__
___
+
-
*
**
/
//
%
==
!=
>
<
>=
<=
=
+=
-=
*=
/=
%=
and
or
not
is
in
->

# 4. Import Statement Patterns
import os
import sys
import json
import math
import random
import datetime
import time
import threading
import collections
import itertools
import functools
import re
from datetime import datetime
from collections import defaultdict
from collections import deque
from functools import wraps
from itertools import chain
from os import path
from sys import exit

# 5. Class Declaration Patterns
class ClassName:
    def __init__(self, arg1, arg2):
        self.arg1 = arg1
        self.arg2 = arg2

class ClassName(BaseClass):
    def __init__(self, arg1, arg2):
        super().__init__(arg1)
        self.arg2 = arg2

class Singleton:
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

from dataclasses import dataclass

@dataclass
class DataClassName:
    field1: int
    field2: str

# 6. Function Declaration Patterns
def function_name(arg1, arg2):
    # Function body
    return arg1 + arg2

def function_with_defaults(arg1, arg2=42):
    return arg1 * arg2

def function_with_varargs(*args, **kwargs):
    print(args, kwargs)

def generator_function():
    yield 1
    yield 2
    yield 3

async def async_function():
    await some_coroutine()

def decorated_function():
    @staticmethod
    def static_method():
        pass

    @classmethod
    def class_method(cls):
        pass

# 7. Context Manager / With Statement Patterns
with open('file.txt', 'r') as file:
    contents = file.read()

from contextlib import contextmanager

@contextmanager
def managed_resource():
    # Setup
    yield
    # Teardown

# 8. Exception Handling Patterns
try:
    risky_operation()
except ValueError as e:
    print("ValueError:", e)
except (TypeError, KeyError) as e:
    print("Type or Key Error:", e)
else:
    print("No exceptions occurred")
finally:
    print("Cleanup actions")

raise Exception("Something went wrong")

assert condition, "Assertion failed"

# --- End of Toolbox ---

